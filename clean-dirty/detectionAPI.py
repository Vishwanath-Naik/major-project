"""import os
import cv2
import shutil
from flask import Flask,request

app=Flask(__name__)

def detection(IMGpath, IMGname):
    os.system(r'python yolov7-master\detect.py --weights yolov7-master\models\Clean-Dirty.pt --img 640 --conf 0.3 --source '
                +IMGpath+' --save-txt')
    container=0
    try:
        with open('yolov7-master\\runs\\detect\\labels\\'+IMGname.split('.')[0]+".txt",mode='r+') as labelFile:
            data=labelFile.read().split('\n')
            for line in data:
                if line != '' :container+=1
        labelFile.close()
    except:
        print('No labels to save')

    for file in os.listdir(r'yolov7-master\runs\detect'):
        if '.png' in file or '.jpg' in file or '.jpeg' in file or '.JPG' in file or '.mp4' in file:
            shutil.copy(r'yolov7-master\runs\detect'+'\\'+file,r'detection-Out'+'\\'+file)
        else : continue
    shutil.rmtree(r'yolov7-master\runs\detect')
    if container>0:print(True)
    else: print(False)
    

@app.route('/',methods=['GET','POST'])
def detectionFlk(): # Detect Solar Panel and Roof Top in each image and return a bool value
    IMGpathJSON=request.json
    IMGpath=IMGpathJSON['Path']
    IMGname=IMGpath.split('\\')[-1]
    os.system(r'python yolov7-master\detect.py --weights yolov7-master\models\Clean-Dirty.pt --img 640 --conf 0.3 --source '
                +IMGpath+' --save-txt')
    container=0
    try:
        with open('yolov7-master\\runs\\detect\\labels\\'+IMGname.split('.')[0]+".txt",mode='r+') as labelFile:
            data=labelFile.read().split('\n')
            for line in data:
                if line != '' :container+=1
        labelFile.close()
    except:
        print('No labels to save')

    for file in os.listdir(r'yolov7-master\runs\detect'):
        if '.png' in file or '.jpg' in file or '.jpeg' in file or '.JPG' in file or '.mp4' in file:
            shutil.copy(r'yolov7-master\runs\detect'+'\\'+file,r'detection-Out'+'\\'+file)
        else : continue
    shutil.rmtree(r'yolov7-master\runs\detect')
    if container>0:print(True)
    else: print(False)
    

# detection(IMGpath,IMGname)
if __name__ == '__main__':
    app.run(debug=True) """





import os                          # Import the os module to access the operating system functionality
import cv2                         # Import the cv2 module to work with images and video processing
import shutil                      # Import the shutil module to provide a higher level interface for file operations
from flask import Flask, request   # Import the Flask and request modules from flask for building web applications

app = Flask(__name__)              # Initialize a Flask application instance


def detection(image_path, image_name): # Define a function that takes image_path and image_name as arguments
    # Call the detect.py file from yolov7-master to perform object detection on the image
    full_path = os.path.join(image_path, image_name)
    os.system(r'python yolov7-master\detect.py --weights yolov7-master\models\Clean-Dirty.pt --img 640 --conf 0.3 --source '
              + full_path + ' --save-txt')
    container = 0  # Initialize a variable to hold the number of detected objects

    try:   # Try to open the text file containing object labels generated by detect.py
        with open('yolov7-master\\runs\\detect\\labels\\' + image_name.split('.')[0] + ".txt", mode='r+') as labelFile:
            data = labelFile.read().split('\n')  # Read the contents of the text file into a list and split on newline character
            for line in data:  # Loop through each line of the list
                if line != '':  # If the line is not empty
                    container += 1  # Increment the container variable

        labelFile.close()  # Close the text file
    except:   # If there is an error opening the text file, print an error message
        print('No labels to save')

    # Copy all image and video files generated by detect.py to the detection-out directory
    for file in os.listdir(r'yolov7-master\runs\detect'):
        if '.png' in file or '.jpg' in file or '.jpeg' in file or '.JPG' in file or '.mp4' in file:
            shutil.copy(r'yolov7-master\runs\detect' + '\\' + file, r'detection-out' + '\\' + file)
        else:
            continue
    shutil.rmtree(r'yolov7-master\runs\detect')  # Delete the runs/detect directory and its contents

    if container > 0:  # If objects were detected, print True
        return(True)
    else:   # Otherwise, print False
        return(False)


@app.route('/', methods=['POST'])
def detect_from_video():
    # Get the path of the video file
    video_path = request.form['path']
    # Open the video file
    cap = cv2.VideoCapture(video_path)
    # Initialize frame counter and interval in seconds
    frame_counter = 0
    interval = 5  # 5 seconds interval
    # Read the video file frame by frame
    while cap.isOpened():
        # Capture a frame
        ret, frame = cap.read()
        if not ret:
            break
        # Increment the frame counter
        frame_counter += 1
        # Check if the current frame should be processed
        if frame_counter % (interval * cap.get(cv2.CAP_PROP_FPS)) == 0:
            # Save the frame as an image
            image_name = 'frame_' + str(frame_counter) + '.jpg'
            cv2.imwrite(image_name, frame)
            # Call the detection function to process the image
            detection(image_name, image_name)
            # Remove the image file
            os.remove(image_name)
    # Release the video file and return a response
    cap.release()
    return 'Detection complete!'

if __name__ == '__main__':
    app.run(debug=True)
